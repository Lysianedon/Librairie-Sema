{"ast":null,"code":"import _objectSpread from \"/Users/lysianedon/Documents/Mes projets Devs/sema02/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { mapActions } from 'vuex';\nimport axios from 'axios';\nexport default {\n  name: 'ButtonsAgeOptionsComponent',\n  data: function data() {\n    return {\n      firstname: '',\n      age: '',\n      goals: [],\n      interests: [],\n      NotifErrorEmptyVal: false\n    };\n  },\n  props: {\n    ageArr: {\n      type: Array,\n      required: true\n    },\n    goalsArr: {\n      type: Array,\n      required: true\n    },\n    interestsArr: {\n      type: Array,\n      required: true\n    },\n    ValidateButtonValue: {\n      type: String,\n      required: true\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    axios.get('http://localhost:8001/user/', {\n      withCredentials: true\n    }).then(function (res) {\n      console.log(res.data);\n      _this.firstname = res.data.user.firstname;\n      _this.age = res.data.user.age;\n      _this.goals = res.data.user.preferences.goals;\n      _this.interests = res.data.user.preferences.interests; // Updating the store with user data:\n\n      _this.$store.commit('updateAge', _this.age);\n\n      _this.goals && _this.goals.forEach(function (goal) {\n        return _this.$store.commit('addNewGoals', goal);\n      });\n      _this.interests && _this.interests.forEach(function (interest) {\n        return _this.$store.commit('addNewInterests', interest);\n      });\n    })[\"catch\"](function (err) {\n      return console.error(err);\n    });\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions(['updateAge', 'addNewGoals', 'removeGoals', 'addNewInterests', 'removeInterests'])), {}, {\n    validateForm: function validateForm() {\n      var _this2 = this;\n\n      var firstname = this.firstname;\n      var age = this.$store.state.age;\n      var goals = this.$store.state.preferences.goals;\n      var interests = this.$store.state.preferences.interests; // Guard : checking if any field is empty. If so, an error notification gets displayed:\n\n      if (firstname.length === 0 || age.length === 0 || goals.length === 0 || interests.length === 0) {\n        this.NotifErrorEmptyVal = true;\n        setTimeout(function () {\n          _this2.NotifErrorEmptyVal = false;\n        }, 1800);\n        return console.error('Champ(s) vide(s)');\n      } // Creating updated user's infos object:\n\n\n      var userInfos = {\n        firstname: firstname,\n        age: age,\n        preferences: {\n          goals: goals,\n          interests: interests\n        }\n      }; // Updating user's infos in database:\n\n      axios.put('http://localhost:8001/user/', _objectSpread({}, userInfos), {\n        withCredentials: true\n      }).then(function (res) {\n        console.log(res.data);\n\n        if (res.data.success) {\n          _this2.$router.push('/');\n        }\n      })[\"catch\"](function (err) {\n        return console.error(err);\n      });\n    },\n    toggleButton: function toggleButton(e) {\n      var _this3 = this;\n\n      // TOGGLE AGE OPTIONS BUTTONS :\n      if (e.target.className.includes('btn-ages-options')) {\n        document.querySelectorAll('.btn-ages-options').forEach(function (button) {\n          if (button !== e.target) {\n            button.classList.remove('selected');\n          }\n\n          if (button === e.target) {\n            if (e.target.className.includes('selected')) {\n              e.target.classList.remove('selected');\n              _this3.age = '';\n\n              _this3.$store.commit('updateAge', _this3.age);\n            } else if (!e.target.className.includes('selected')) {\n              e.target.classList.add('selected');\n              _this3.age = button.value;\n\n              _this3.$store.commit('updateAge', _this3.age);\n            }\n          }\n        });\n      } // TOGGLE GOALS OPTIONS BUTTONS :\n\n\n      if (e.target.className.includes('btn-goals-options')) {\n        document.querySelectorAll('.btn-goals-options').forEach(function (button) {\n          if (button === e.target) {\n            if (e.target.className.includes('selected')) {\n              e.target.classList.remove('selected');\n\n              _this3.$store.commit('removeGoals', button.value);\n            } else if (!e.target.className.includes('selected')) {\n              e.target.classList.add('selected');\n\n              _this3.$store.commit('addNewGoals', button.value);\n            }\n          }\n        });\n      } // TOGGLE INTERESTS OPTIONS BUTTONS :\n\n\n      if (e.target.className.includes('btn-interests-options')) {\n        document.querySelectorAll('.btn-interests-options').forEach(function (button) {\n          if (button === e.target) {\n            if (e.target.className.includes('selected')) {\n              e.target.classList.remove('selected');\n\n              _this3.$store.commit('removeInterests', button.value);\n            } else if (!e.target.className.includes('selected')) {\n              e.target.classList.add('selected');\n\n              _this3.$store.commit('addNewInterests', button.value);\n            }\n          }\n        });\n      }\n    }\n  })\n};","map":{"version":3,"mappings":";;;;;;;AAoCA;AACA;AACA;EACAA,kCADA;EAEAC,IAFA,kBAEA;IACA;MACAC,aADA;MAEAC,OAFA;MAGAC,SAHA;MAIAC,aAJA;MAKAC;IALA;EAOA,CAVA;EAWAC;IACAC;MACAC,WADA;MAEAC;IAFA,CADA;IAKAC;MACAF,WADA;MAEAC;IAFA,CALA;IASAE;MACAH,WADA;MAEAC;IAFA,CATA;IAaAG;MACAJ,YADA;MAEAC;IAFA;EAbA,CAXA;EA6BAI,OA7BA,qBA6BA;IAAA;;IACAC,MACAC,GADA,CACA,6BADA,EACA;MAAAC;IAAA,CADA,EAEAC,IAFA,CAEA;MACAC;MACA;MACA;MACA;MACA,sDALA,CAMA;;MACA;;MACA;QAAA;MAAA;MACA;QAAA;MAAA;IACA,CAZA,WAaA;MACA;IACA,CAfA;EAgBA,CA9CA;EA+CAC,yCACAC,6FADA;IAEAC,YAFA,0BAEA;MAAA;;MACA;MACA;MACA;MACA,wDAJA,CAMA;;MACA;QACA;QACAC;UACA;QACA,CAFA,EAEA,IAFA;QAGA;MACA,CAbA,CAeA;;;MACA;QACArB,oBADA;QAEAC,QAFA;QAGAqB;UACApB,YADA;UAEAC;QAFA;MAHA,EAhBA,CAwBA;;MACAU,MACAU,GADA,CACA,6BADA,oBACAC,SADA,GACA;QAAAT;MAAA,CADA,EAEAC,IAFA,CAEA;QACAC;;QACA;UACA;QACA;MACA,CAPA,WAQA;QACA;MACA,CAVA;IAWA,CAtCA;IAuCAQ,YAvCA,wBAuCAC,CAvCA,EAuCA;MAAA;;MACA;MACA;QACAC;UACA;YACAC;UACA;;UACA;YACA;cACAF;cACA;;cACA;YACA,CAJA,MAIA;cACAA;cACA;;cACA;YACA;UACA;QACA,CAfA;MAgBA,CAnBA,CAoBA;;;MACA;QACAC;UACA;YACA;cACAD;;cACA;YACA,CAHA,MAGA;cACAA;;cACA;YACA;UACA;QACA,CAVA;MAWA,CAjCA,CAkCA;;;MACA;QACAC;UACA;YACA;cACAD;;cACA;YACA,CAHA,MAGA;cACAA;;cACA;YACA;UACA;QACA,CAVA;MAWA;IACA;EAvFA;AA/CA","names":["name","data","firstname","age","goals","interests","NotifErrorEmptyVal","props","ageArr","type","required","goalsArr","interestsArr","ValidateButtonValue","mounted","axios","get","withCredentials","then","console","methods","mapActions","validateForm","setTimeout","preferences","put","userInfos","toggleButton","e","document","button"],"sourceRoot":"src/components","sources":["ButtonsOptions.vue"],"sourcesContent":["<template>\n    <div>\n      <div class=\"notification is-danger is-light column is-6\" v-if=\"NotifErrorEmptyVal\" >\n        <p class=\"has-text-centered mt-2\">Des champs sont vides. Veuillez compléter tout le formulaire. </p>\n        <button class=\"delete\"></button>\n      </div>\n\n      <h2 class=\"is-size-4 has-text-centered\">Je m'appelle:</h2>\n      <input type=\"text\" name=\"firstname\" id=\"firstname\" v-model=\"firstname\" class=\"input input-firstname is-medium\">\n\n      <h2 class=\"is-size-4 has-text-centered\">J'ai:</h2>\n      <div class=\"buttons\">\n        <div v-for=\"(value) in ageArr\" :key=\"value\">\n            <input type=\"button\" :class=\"`btn-option btn-ages-options ${value === age ? 'selected' : ''}`\" :value=value @click=\"toggleButton\">\n          </div>\n      </div>\n      <h2 class=\"is-size-4 has-text-centered title-goals\">Je suis ici pour...</h2>\n        <h3 class=\"is-size-6 has-text-centered\">Plusieurs choix possibles</h3>\n\n      <div class=\"buttons\">\n        <div v-for=\"(value) in goalsArr\" :key=\"value\">\n          <input type=\"button\" :class=\"`btn-option btn-goals-options ${goals.includes(value) ? 'selected' : '' }`\" :value=value @click=\"toggleButton\">\n        </div>\n    </div>\n      <h2 class=\"is-size-4 has-text-centered title-interests\">Je suis plutôt intéressé.e par les...</h2>\n      <h3 class=\"is-size-6 has-text-centered\">Plusieurs choix possibles</h3>\n      <div class=\"buttons\">\n        <div v-for=\"(value) in interestsArr\" :key=\"value\">\n          <input type=\"button\" :class=\"`btn-option btn-interests-options ${interests.includes(value) ? 'selected' : '' } `\" :value=value @click=\"toggleButton\">\n        </div>\n    </div>\n      <button class=\"btn-valider\" @click=\"validateForm\">{{ValidateButtonValue}}</button>\n    </div>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\nimport axios from 'axios'\nexport default {\n  name: 'ButtonsAgeOptionsComponent',\n  data () {\n    return {\n      firstname: '',\n      age: '',\n      goals: [],\n      interests: [],\n      NotifErrorEmptyVal: false\n    }\n  },\n  props: {\n    ageArr: {\n      type: Array,\n      required: true\n    },\n    goalsArr: {\n      type: Array,\n      required: true\n    },\n    interestsArr: {\n      type: Array,\n      required: true\n    },\n    ValidateButtonValue: {\n      type: String,\n      required: true\n    }\n  },\n  mounted () {\n    axios\n      .get('http://localhost:8001/user/', { withCredentials: true })\n      .then(res => {\n        console.log(res.data)\n        this.firstname = res.data.user.firstname\n        this.age = res.data.user.age\n        this.goals = res.data.user.preferences.goals\n        this.interests = res.data.user.preferences.interests\n        // Updating the store with user data:\n        this.$store.commit('updateAge', this.age)\n        this.goals && this.goals.forEach(goal => this.$store.commit('addNewGoals', goal))\n        this.interests && this.interests.forEach(interest => this.$store.commit('addNewInterests', interest))\n      })\n      .catch(err => {\n        return console.error(err)\n      })\n  },\n  methods: {\n    ...mapActions(['updateAge', 'addNewGoals', 'removeGoals', 'addNewInterests', 'removeInterests']),\n    validateForm () {\n      const firstname = this.firstname\n      const age = this.$store.state.age\n      const goals = this.$store.state.preferences.goals\n      const interests = this.$store.state.preferences.interests\n\n      // Guard : checking if any field is empty. If so, an error notification gets displayed:\n      if (firstname.length === 0 || age.length === 0 || goals.length === 0 || interests.length === 0) {\n        this.NotifErrorEmptyVal = true\n        setTimeout(() => {\n          this.NotifErrorEmptyVal = false\n        }, 1800)\n        return console.error('Champ(s) vide(s)')\n      }\n\n      // Creating updated user's infos object:\n      const userInfos = {\n        firstname,\n        age,\n        preferences: {\n          goals,\n          interests\n        }\n      }\n      // Updating user's infos in database:\n      axios\n        .put('http://localhost:8001/user/', { ...userInfos }, { withCredentials: true })\n        .then(res => {\n          console.log(res.data)\n          if (res.data.success) {\n            this.$router.push('/')\n          }\n        })\n        .catch(err => {\n          return console.error(err)\n        })\n    },\n    toggleButton (e) {\n      // TOGGLE AGE OPTIONS BUTTONS :\n      if (e.target.className.includes('btn-ages-options')) {\n        document.querySelectorAll('.btn-ages-options').forEach(button => {\n          if (button !== e.target) {\n            button.classList.remove('selected')\n          }\n          if (button === e.target) {\n            if (e.target.className.includes('selected')) {\n              e.target.classList.remove('selected')\n              this.age = ''\n              this.$store.commit('updateAge', this.age)\n            } else if (!e.target.className.includes('selected')) {\n              e.target.classList.add('selected')\n              this.age = button.value\n              this.$store.commit('updateAge', this.age)\n            }\n          }\n        })\n      }\n      // TOGGLE GOALS OPTIONS BUTTONS :\n      if (e.target.className.includes('btn-goals-options')) {\n        document.querySelectorAll('.btn-goals-options').forEach(button => {\n          if (button === e.target) {\n            if (e.target.className.includes('selected')) {\n              e.target.classList.remove('selected')\n              this.$store.commit('removeGoals', button.value)\n            } else if (!e.target.className.includes('selected')) {\n              e.target.classList.add('selected')\n              this.$store.commit('addNewGoals', button.value)\n            }\n          }\n        })\n      }\n      // TOGGLE INTERESTS OPTIONS BUTTONS :\n      if (e.target.className.includes('btn-interests-options')) {\n        document.querySelectorAll('.btn-interests-options').forEach(button => {\n          if (button === e.target) {\n            if (e.target.className.includes('selected')) {\n              e.target.classList.remove('selected')\n              this.$store.commit('removeInterests', button.value)\n            } else if (!e.target.className.includes('selected')) {\n              e.target.classList.add('selected')\n              this.$store.commit('addNewInterests', button.value)\n            }\n          }\n        })\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.notification{\n    margin: 0 auto;\n    font-size: 1.1rem;\n    position: fixed;\n    position: fixed !important;\n    z-index: 1;\n    top: 10%;\n    transform: translate(50%,-100%);\n}\n\n.selected{\n    background-color:  #FFF1CC;\n}\n\n.buttons{\n  justify-content: center;\n}\n\n.btn-option{\n  font-family: 'Roboto', sans-serif;\n  height: 7vh;\n  min-width: 8vw;\n}\n\nh2{\n  font-family: 'Ibarra Real Nova', 'serif';\n}\n\n.title-goals, .title-interests{\n  margin-top: 5% !important;\n}\n\n.input-firstname{\n  width: 30%;\n  margin: auto;\n  display: block;\n  margin-bottom: 5%;\n}\n\n.btn-valider{\n  min-width: fit-content;\n  width: 20%;\n  height: 6.5vh;\n  font-weight: bold;\n  background-color: #D8E0CF;\n  text-transform: uppercase;\n  /* margin: auto !important; */\n  margin: 3% auto 0 40%;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}